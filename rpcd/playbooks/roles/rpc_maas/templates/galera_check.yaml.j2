{% set label = "galera_check" %}
{% set check_name = label+'--'+ansible_hostname %}
type        : agent.plugin
label       : "{{ check_name }}"
period      : "{{ maas_check_period_override[label] | default(maas_check_period) }}"
timeout     : "{{ maas_check_timeout_override[label] | default(maas_check_timeout) }}"
disabled    : "{{ (check_name | match(maas_excluded_checks_regex)) | ternary('true', 'false') }}"
details     :
    file    : galera_check.py
    args    : ["-H", "{{ ansible_ssh_host }}"]
alarms      :
    wsrep_cluster_size :
        label                   : wsrep_cluster_size--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('wsrep_cluster_size--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["wsrep_cluster_size"] < {{ groups["galera"] | length }}) {
                return new AlarmStatus(CRITICAL, "Galera cluster size less than expected");
            }
    wsrep_local_state :
        label                   : wsrep_local_state--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('wsrep_local_state--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["wsrep_local_state_comment"] != "Synced" ) {
                return new AlarmStatus(CRITICAL, "Galera cluster node not synced");
            }
    percentage_used_mysql_connections :
        label                   : percentage_used_mysql_connections--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('percentage_used_mysql_connections--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (percentage(metric["mysql_current_connections"], metric["mysql_max_configured_connections"]) > {{ mysql_connection_critical_threshold }} ) {
                return new AlarmStatus(CRITICAL, "Mysql connectons has exceeded {{ mysql_connection_critical_threshold }}% of configured maximum");
            }
            if (percentage(metric["mysql_current_connections"], metric["mysql_max_configured_connections"]) > {{ mysql_connection_warning_threshold }} ) {
                return new AlarmStatus(WARNING, "Mysql connectons has exceeded {{ mysql_connection_warning_threshold }}% of configured maximum");
            }
